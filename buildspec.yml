version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo Installing dependencies
      - pip install --upgrade pip
      - pip install awscli boto3
  
  pre_build:
    commands:
      # Setup environment variables
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - PROJECT_NAME=$(cat cloudformation.yaml | grep -m 1 'ProjectName' -A 3 | grep 'Default:' | awk '{print $2}')
      - ENVIRONMENT=$(cat cloudformation.yaml | grep -m 1 'EnvironmentName' -A 3 | grep 'Default:' | awk '{print $2}')
      - ECR_REPOSITORY_NAME="${PROJECT_NAME}-${ENVIRONMENT}-repository"
      - ECR_REPOSITORY_URI="${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}"
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      
      # Check if build should be skipped
      - |
        SKIP_BUILD=$(aws ssm get-parameter --name "/${PROJECT_NAME}/${ENVIRONMENT}/skip-build" --query "Parameter.Value" --output text || echo "false")
        echo "Skip build: $SKIP_BUILD"
  
  build:
    commands:
      - |
        if [ "$SKIP_BUILD" = "false" ]; then
          echo "Building Docker images"
          docker build --target training -t ${ECR_REPOSITORY_URI}:${IMAGE_TAG}-training .
          docker build --target inference -t ${ECR_REPOSITORY_URI}:${IMAGE_TAG}-inference .
          
          # Tag latest
          docker tag ${ECR_REPOSITORY_URI}:${IMAGE_TAG}-training ${ECR_REPOSITORY_URI}:latest-training
          docker tag ${ECR_REPOSITORY_URI}:${IMAGE_TAG}-inference ${ECR_REPOSITORY_URI}:latest-inference
        else
          echo "Build skipped as indicated by SSM parameter"
          echo "Using existing images from ECR"
          
          # Set IMAGE_TAG to latest if skipping build
          IMAGE_TAG="latest"
          echo "Using latest tag for existing images"
        fi
  
  post_build:
    commands:
      - |
        if [ "$SKIP_BUILD" = "false" ]; then
          # Authenticate and push only if we built new images
          echo "Authenticating with ECR"
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
          echo "Pushing to ECR"
          docker push ${ECR_REPOSITORY_URI}:${IMAGE_TAG}-training
          docker push ${ECR_REPOSITORY_URI}:${IMAGE_TAG}-inference
          docker push ${ECR_REPOSITORY_URI}:latest-training
          docker push ${ECR_REPOSITORY_URI}:latest-inference
        else
          echo "Skipping push to ECR since build was skipped"
        fi
      
      # Create output file (always needed for subsequent stages)
      - |
        cat > build_output.json << EOF
        {
          "TrainingImageUri":"${ECR_REPOSITORY_URI}:${IMAGE_TAG}-training",
          "InferenceImageUri":"${ECR_REPOSITORY_URI}:${IMAGE_TAG}-inference",
          "S3Bucket":"${PROJECT_NAME}-${ENVIRONMENT}-artifacts-${ACCOUNT_ID}",
          "S3DataPrefix":"mscoco_processed",
          "BuildSkipped":"${SKIP_BUILD}"
        }
        EOF
      # Add to the phases.post_build.commands section:
      - |
        # Create frontend directory
        mkdir -p frontend
        
        # Create frontend HTML file
        cat > frontend/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>GAN Text-to-Image Generator</title>
            <style>
                :root {
                    --primary-color: #6200ea;
                    --secondary-color: #b388ff;
                    --bg-color: #f9f9fb;
                    --card-bg: #ffffff;
                    --text-color: #333333;
                    --border-radius: 10px;
                    --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
                }
                
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    margin: 0;
                    padding: 0;
                    background-color: var(--bg-color);
                    color: var(--text-color);
                }
                
                .container {
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 20px;
                }
                
                header {
                    background-color: var(--primary-color);
                    color: white;
                    padding: 20px 0;
                    margin-bottom: 30px;
                    box-shadow: var(--box-shadow);
                }
                
                header h1 {
                    margin: 0;
                    padding: 0 20px;
                    font-size: 28px;
                    font-weight: 500;
                }
                
                .input-section {
                    background-color: var(--card-bg);
                    padding: 25px;
                    border-radius: var(--border-radius);
                    box-shadow: var(--box-shadow);
                    margin-bottom: 30px;
                }
                
                .input-group {
                    display: flex;
                    gap: 15px;
                    margin-bottom: 15px;
                }
                
                input[type="text"] {
                    flex: 1;
                    padding: 12px 15px;
                    border: 1px solid #ddd;
                    border-radius: var(--border-radius);
                    font-size: 16px;
                    outline: none;
                    transition: border-color 0.3s;
                }
                
                input[type="text"]:focus {
                    border-color: var(--primary-color);
                }
                
                button {
                    background-color: var(--primary-color);
                    color: white;
                    border: none;
                    padding: 12px 20px;
                    border-radius: var(--border-radius);
                    cursor: pointer;
                    font-size: 16px;
                    transition: background-color 0.3s, transform 0.1s;
                }
                
                button:hover {
                    background-color: #7c4dff;
                }
                
                button:active {
                    transform: scale(0.98);
                }
                
                .secondary-btn {
                    background-color: var(--secondary-color);
                }
                
                .sample-prompts {
                    margin-top: 15px;
                }
                
                .sample-prompt {
                    display: inline-block;
                    background-color: #f0f0f0;
                    padding: 8px 12px;
                    margin: 5px;
                    border-radius: 18px;
                    font-size: 14px;
                    cursor: pointer;
                    transition: background-color 0.2s;
                }
                
                .sample-prompt:hover {
                    background-color: #e0e0e0;
                }
                
                .results-container {
                    display: flex;
                    gap: 30px;
                    margin-top: 30px;
                }
                
                .images-section {
                    flex: 2;
                    background-color: var(--card-bg);
                    border-radius: var(--border-radius);
                    box-shadow: var(--box-shadow);
                    padding: 25px;
                }
                
                .metrics-section {
                    flex: 1;
                    background-color: var(--card-bg);
                    border-radius: var(--border-radius);
                    box-shadow: var(--box-shadow);
                    padding: 25px;
                    height: fit-content;
                }
                
                .images-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
                    gap: 20px;
                    margin-top: 20px;
                }
                
                .image-card {
                    border-radius: var(--border-radius);
                    overflow: hidden;
                    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
                    transition: transform 0.2s;
                }
                
                .image-card:hover {
                    transform: scale(1.03);
                }
                
                .image-card img {
                    width: 100%;
                    display: block;
                    height: auto;
                }
                
                .metric-item {
                    margin-bottom: 15px;
                    padding-bottom: 15px;
                    border-bottom: 1px solid #eee;
                }
                
                .metric-item:last-child {
                    border-bottom: none;
                }
                
                .metric-name {
                    font-weight: 600;
                    color: #555;
                    margin-bottom: 5px;
                }
                
                .metric-value {
                    font-size: 18px;
                    color: var(--primary-color);
                }
                
                .metric-group h3 {
                    color: var(--primary-color);
                    margin-top: 25px;
                    margin-bottom: 15px;
                    padding-bottom: 8px;
                    border-bottom: 2px solid var(--secondary-color);
                }
                
                .loading {
                    text-align: center;
                    padding: 40px;
                    font-size: 18px;
                    color: #777;
                }
                
                .loading-spinner {
                    display: inline-block;
                    width: 50px;
                    height: 50px;
                    border: 3px solid rgba(98, 0, 234, 0.3);
                    border-radius: 50%;
                    border-top-color: var(--primary-color);
                    animation: spin 1s ease-in-out infinite;
                    margin-bottom: 15px;
                }
                
                @keyframes spin {
                    to { transform: rotate(360deg); }
                }
                
                @media (max-width: 768px) {
                    .input-group {
                        flex-direction: column;
                    }
                    
                    .results-container {
                        flex-direction: column;
                    }
                }
            </style>
        </head>
        <body>
            <header>
                <div class="container">
                    <h1>GAN Text-to-Image Generator</h1>
                </div>
            </header>
            
            <div class="container">
                <div class="input-section">
                    <div class="input-group">
                        <input type="text" id="promptInput" placeholder="Enter a text prompt to generate an image...">
                        <button id="generateBtn">Generate</button>
                        <button id="metricsBtn" class="secondary-btn">Generate with FID</button>
                    </div>
                    
                    <div class="sample-prompts">
                        <div class="sample-prompt" data-prompt="A beautiful sunset over mountains">A beautiful sunset over mountains</div>
                        <div class="sample-prompt" data-prompt="A cat wearing a hat">A cat wearing a hat</div>
                        <div class="sample-prompt" data-prompt="A dreamy forest landscape">A dreamy forest landscape</div>
                        <div class="sample-prompt" data-prompt="An abstract painting with vibrant colors">An abstract painting</div>
                    </div>
                </div>
                
                <div class="results-container">
                    <div class="images-section">
                        <h2>Generated Images</h2>
                        <div id="imagesContainer" class="images-grid">
                            <div class="loading" id="loadingPlaceholder">
                                <div>Enter a prompt above to generate images</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="metrics-section">
                        <h2>Metrics</h2>
                        <div id="metricsContainer">
                            <div class="loading" id="loadingMetrics">
                                <p>Loading model metrics...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <script>
                document.addEventListener('DOMContentLoaded', function() {
                    // Elements
                    const promptInput = document.getElementById('promptInput');
                    const generateBtn = document.getElementById('generateBtn');
                    const metricsBtn = document.getElementById('metricsBtn');
                    const imagesContainer = document.getElementById('imagesContainer');
                    const metricsContainer = document.getElementById('metricsContainer');
                    const samplePrompts = document.querySelectorAll('.sample-prompt');
                    
                    // API endpoints
                    const API_BASE = '/api/v1';
                    const GENERATE_ENDPOINT = `${API_BASE}/generate`;
                    const METRICS_ENDPOINT = `${API_BASE}/metrics`;
                    const IMAGE_METRICS_ENDPOINT = `${API_BASE}/image-metrics`;
                    
                    // Load model metrics on page load
                    loadModelMetrics();
                    
                    // Sample prompts click handler
                    samplePrompts.forEach(prompt => {
                        prompt.addEventListener('click', function() {
                            promptInput.value = this.dataset.prompt;
                        });
                    });
                    
                    // Generate button click handler
                    generateBtn.addEventListener('click', function() {
                        if (!promptInput.value.trim()) {
                            alert('Please enter a text prompt');
                            return;
                        }
                        
                        generateImages(promptInput.value);
                    });
                    
                    // Metrics button click handler
                    metricsBtn.addEventListener('click', function() {
                        if (!promptInput.value.trim()) {
                            alert('Please enter a text prompt');
                            return;
                        }
                        
                        generateImagesWithMetrics(promptInput.value);
                    });
                    
                    // Enter key handler
                    promptInput.addEventListener('keyup', function(event) {
                        if (event.key === 'Enter') {
                            generateBtn.click();
                        }
                    });
                    
                    // Function to generate images
                    async function generateImages(prompt) {
                        showLoading();
                        
                        try {
                            const response = await fetch(GENERATE_ENDPOINT, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ text: prompt })
                            });
                            
                            if (!response.ok) {
                                throw new Error(`Error: ${response.status}`);
                            }
                            
                            const data = await response.json();
                            displayImages(data);
                        } catch (error) {
                            console.error('Error generating images:', error);
                            imagesContainer.innerHTML = `
                                <div class="loading">
                                    <p>Error generating images: ${error.message}</p>
                                </div>
                            `;
                        }
                    }
                    
                    // Function to generate images with metrics
                    async function generateImagesWithMetrics(prompt) {
                        showLoading();
                        
                        try {
                            const response = await fetch(IMAGE_METRICS_ENDPOINT, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ 
                                    text: prompt,
                                    num_samples: 4 
                                })
                            });
                            
                            if (!response.ok) {
                                throw new Error(`Error: ${response.status}`);
                            }
                            
                            const data = await response.json();
                            displayImages(data);
                            displayImageMetrics(data);
                        } catch (error) {
                            console.error('Error generating images with metrics:', error);
                            imagesContainer.innerHTML = `
                                <div class="loading">
                                    <p>Error generating images: ${error.message}</p>
                                </div>
                            `;
                        }
                    }
                    
                    // Function to load model metrics
                    async function loadModelMetrics() {
                        try {
                            const response = await fetch(METRICS_ENDPOINT);
                            
                            if (!response.ok) {
                                throw new Error(`Error: ${response.status}`);
                            }
                            
                            const data = await response.json();
                            displayModelMetrics(data);
                        } catch (error) {
                            console.error('Error loading model metrics:', error);
                            metricsContainer.innerHTML = `
                                <div class="metric-group">
                                    <p>Error loading metrics: ${error.message}</p>
                                </div>
                            `;
                        }
                    }
                    
                    // Function to display images
                    function displayImages(data) {
                        if (!data.images || data.images.length === 0) {
                            imagesContainer.innerHTML = `
                                <div class="loading">
                                    <p>No images generated</p>
                                </div>
                            `;
                            return;
                        }
                        
                        let html = '';
                        data.images.forEach(imageBase64 => {
                            html += `
                                <div class="image-card">
                                    <img src="data:image/png;base64,${imageBase64}" alt="Generated image: ${data.prompt}">
                                </div>
                            `;
                        });
                        
                        imagesContainer.innerHTML = html;
                    }
                    
                    // Function to display image metrics
                    function displayImageMetrics(data) {
                        let html = '';
                        
                        if (data.fid_score !== undefined) {
                            html += `
                                <div class="metric-group">
                                    <h3>Generation Metrics</h3>
                                    <div class="metric-item">
                                        <div class="metric-name">FID Score</div>
                                        <div class="metric-value">${data.fid_score.toFixed(2)}</div>
                                        <div class="metric-desc">Lower is better. Measures image quality compared to real images.</div>
                                    </div>
                                </div>
                            `;
                        }
                        
                        metricsContainer.innerHTML = html;
                    }
                    
                    // Function to display model metrics
                    function displayModelMetrics(data) {
                        if (!data) {
                            metricsContainer.innerHTML = `
                                <div class="metric-group">
                                    <p>No model metrics available</p>
                                </div>
                            `;
                            return;
                        }
                        
                        let html = '';
                        
                        if (data.validation_metrics) {
                            const metrics = data.validation_metrics;
                            html += `
                                <div class="metric-group">
                                    <h3>Validation Metrics</h3>
                                    <div class="metric-item">
                                        <div class="metric-name">Discriminator Loss</div>
                                        <div class="metric-value">${metrics.d_loss.toFixed(4)}</div>
                                    </div>
                                    <div class="metric-item">
                                        <div class="metric-name">Generator Loss</div>
                                        <div class="metric-value">${metrics.g_loss.toFixed(4)}</div>
                                    </div>
                                    <div class="metric-item">
                                        <div class="metric-name">CLIP Loss (16x16)</div>
                                        <div class="metric-value">${metrics.clip_loss_16.toFixed(4)}</div>
                                    </div>
                                    <div class="metric-item">
                                        <div class="metric-name">CLIP Loss (8x8)</div>
                                        <div class="metric-value">${metrics.clip_loss_8.toFixed(4)}</div>
                                    </div>
                                </div>
                            `;
                        }
                        
                        if (data.hyperparameters) {
                            const hp = data.hyperparameters;
                            html += `
                                <div class="metric-group">
                                    <h3>Hyperparameters</h3>
                                    <div class="metric-item">
                                        <div class="metric-name">Learning Rate</div>
                                        <div class="metric-value">${hp.learning_rate}</div>
                                    </div>
                                    <div class="metric-item">
                                        <div class="metric-name">KL Weight</div>
                                        <div class="metric-value">${hp.kl_weight}</div>
                                    </div>
                                    <div class="metric-item">
                                        <div class="metric-name">Epochs</div>
                                        <div class="metric-value">${hp.epochs}</div>
                                    </div>
                                </div>
                            `;
                        }
                        
                        if (data.model_id) {
                            html += `
                                <div class="metric-group">
                                    <h3>Model Info</h3>
                                    <div class="metric-item">
                                        <div class="metric-name">Model ID</div>
                                        <div class="metric-value">${data.model_id}</div>
                                    </div>
                                    <div class="metric-item">
                                        <div class="metric-name">Training Date</div>
                                        <div class="metric-value">${data.training_date || 'N/A'}</div>
                                    </div>
                                </div>
                            `;
                        }
                        
                        metricsContainer.innerHTML = html;
                    }
                    
                    // Function to show loading indicators
                    function showLoading() {
                        imagesContainer.innerHTML = `
                            <div class="loading">
                                <div class="loading-spinner"></div>
                                <p>Generating images...</p>
                            </div>
                        `;
                    }
                });
            </script>
        </body>
        </html>
        EOF
        
        # Create S3 bucket for frontend if it doesn't exist
        if ! aws s3 ls "s3://${PROJECT_NAME}-${ENVIRONMENT}-frontend" 2>&1 > /dev/null; then
          echo "Creating S3 bucket for frontend"
          aws s3 mb "s3://${PROJECT_NAME}-${ENVIRONMENT}-frontend" --region ${AWS_DEFAULT_REGION}
          
          # Configure for static website hosting
          aws s3 website "s3://${PROJECT_NAME}-${ENVIRONMENT}-frontend" \
            --index-document index.html \
            --error-document index.html
          
          # Set bucket policy for public access
          cat > bucket-policy.json << EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::${PROJECT_NAME}-${ENVIRONMENT}-frontend/*"
              }
            ]
          }
          EOF
          
          aws s3api put-bucket-policy \
            --bucket "${PROJECT_NAME}-${ENVIRONMENT}-frontend" \
            --policy file://bucket-policy.json
        fi
        
        # Upload frontend files to S3
        echo "Uploading frontend files to S3"
        aws s3 cp frontend/index.html "s3://${PROJECT_NAME}-${ENVIRONMENT}-frontend/index.html" --content-type "text/html"
        
        # Add frontend URL to output file
        FRONTEND_URL="http://${PROJECT_NAME}-${ENVIRONMENT}-frontend.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com"
        echo "Frontend deployed to: ${FRONTEND_URL}"
        
        # Install jq if not already installed
        if ! command -v jq &> /dev/null; then
          echo "Installing jq for JSON processing"
          apt-get update -qq && apt-get install -y jq || yum install -y jq
        fi
        
        # Update build_output.json with frontend URL
        cat build_output.json | jq ". + {\"FrontendUrl\": \"${FRONTEND_URL}\"}" > build_output_updated.json
        mv build_output_updated.json build_output.json

artifacts:
  files:
    - build_output.json
  discard-paths: yes