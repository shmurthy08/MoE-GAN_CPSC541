AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for Text-to-Image GAN Model with SageMaker and API Gateway'

Parameters:
  ProjectName:
    Type: String
    Default: gan-text-to-image
    Description: Name of the project for resource naming
  
  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues: [dev, test, prod]
    Description: Environment name
  
  ModelArtifactUrl:
    Type: String
    Default: ''
    Description: S3 URL of the model artifact (optional for initial setup)
  
  ContainerImage:
    Type: String
    Default: ''
    Description: ECR image URL for the model container (optional for initial setup)
  
  InstanceType:
    Type: String
    Default: ml.t2.medium
    AllowedValues:
      - ml.m5.xlarge
      - ml.t2.medium
      - ml.g5.xlarge
      - ml.g5.2xlarge
      - ml.g6.xlarge
      - ml.g6.2xlarge
    Description: SageMaker instance type for the endpoint (free tier eligible)

Resources:
  # ===== IAM Roles =====
  SageMakerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: !Sub '${ProjectName}-${EnvironmentName}-sagemaker-role'

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: !Sub '${ProjectName}-${EnvironmentName}-lambda-role'


  # ===== Storage Resources =====
  ModelArtifactBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${ProjectName}-${EnvironmentName}-artifacts-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled

  # ===== SageMaker Resources =====
  SageMakerModel:
    Type: 'AWS::SageMaker::Model'
    Condition: HasModelArtifact
    Properties:
      ExecutionRoleArn: !GetAtt SageMakerRole.Arn
      ModelName: !Sub '${ProjectName}-${EnvironmentName}-model'
      PrimaryContainer:
        Image: !Ref ContainerImage
        ModelDataUrl: !Ref ModelArtifactUrl

  SageMakerEndpointConfig:
    Type: 'AWS::SageMaker::EndpointConfig'
    Condition: HasModelArtifact
    Properties:
      EndpointConfigName: !Sub '${ProjectName}-${EnvironmentName}-endpoint-config'
      ProductionVariants:
        - InitialInstanceCount: 1
          InstanceType: !Ref InstanceType
          ModelName: !GetAtt SageMakerModel.ModelName
          VariantName: 'AllTraffic'
          InitialVariantWeight: 1.0

  SageMakerEndpoint:
    Type: 'AWS::SageMaker::Endpoint'
    Condition: HasModelArtifact
    Properties:
      EndpointName: !Sub '${ProjectName}-${EnvironmentName}-endpoint'
      EndpointConfigName: !GetAtt SageMakerEndpointConfig.EndpointConfigName

  # ===== Lambda Function =====
  InferenceLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-${EnvironmentName}-inference'
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.handler
      Timeout: 30
      MemorySize: 256
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import base64
          from io import BytesIO

          def handler(event, context):
              # Get the endpoint name from environment variables
              endpoint_name = os.environ.get('SAGEMAKER_ENDPOINT_NAME', '')
              
              # If no endpoint exists yet, return a message
              if not endpoint_name:
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': 'https://gan-text-to-image-dev-frontend.s3.us-east-1.amazonaws.com',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                      },
                      'body': json.dumps({
                          'message': 'Model endpoint not deployed yet. Please deploy a model first.'
                      })
                  }
              
              # Get the text prompt from the request
              try:
                  body = json.loads(event.get('body', '{}'))
                  text_prompt = body.get('text', '')
                  
                  if not text_prompt:
                      return {
                          'statusCode': 400,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': 'https://gan-text-to-image-dev-frontend.s3.us-east-1.amazonaws.com',
                              'Access-Control-Allow-Headers': 'Content-Type',
                              'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                          },
                          'body': json.dumps({
                              'error': 'Text prompt is required in the request body.'
                          })
                      }
                  
                  # Call the SageMaker endpoint
                  sagemaker_runtime = boto3.client('sagemaker-runtime')
                  response = sagemaker_runtime.invoke_endpoint(
                      EndpointName=endpoint_name,
                      ContentType='application/json',
                      Body=json.dumps({'text': text_prompt})
                  )
                  
                  # Process the response (assuming the model returns a base64 encoded image)
                  result = json.loads(response['Body'].read().decode())
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': 'https://gan-text-to-image-dev-frontend.s3.us-east-1.amazonaws.com',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                      },
                      'body': json.dumps(result)
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': 'https://gan-text-to-image-dev-frontend.s3.us-east-1.amazonaws.com',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                      },
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }
      Environment:
        Variables:
          SAGEMAKER_ENDPOINT_NAME: 
            Fn::If:
              - HasModelArtifact
              - !Ref SageMakerEndpoint
              - ""

  ImageMetricsLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-${EnvironmentName}-image-metrics'
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.handler
      Timeout: 60
      MemorySize: 1024
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import base64
          
          def handler(event, context):
              # Get the endpoint name
              endpoint_name = os.environ.get('SAGEMAKER_ENDPOINT_NAME', '')
              if not endpoint_name:
                  endpoint_name = 'gan-ep-' + os.environ.get('ENVIRONMENT', 'dev')
              
              try:
                  body = json.loads(event.get('body', '{}'))
                  text_prompt = body.get('text', '')
                  num_samples = min(body.get('num_samples', 4), 8)
                  
                  if not text_prompt:
                      return {
                          'statusCode': 400,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': 'https://gan-text-to-image-dev-frontend.s3.us-east-1.amazonaws.com',
                              'Access-Control-Allow-Headers': 'Content-Type',
                              'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                          },
                          'body': json.dumps({
                              'error': 'Text prompt is required'
                          })
                      }
                  
                  # Call SageMaker endpoint with FID calculation enabled
                  sagemaker_runtime = boto3.client('sagemaker-runtime')
                  response = sagemaker_runtime.invoke_endpoint(
                      EndpointName=endpoint_name,
                      ContentType='application/json',
                      Body=json.dumps({
                          'text': text_prompt,
                          'num_samples': num_samples,
                          'calculate_fid': True
                      })
                  )
                  
                  result = json.loads(response['Body'].read().decode())
                  
                  # Add training metrics for comparison
                  s3 = boto3.client('s3')
                  sagemaker = boto3.client('sagemaker')
                  
                  # Find latest training job
                  training_job = "gan-train-2504270134"

                  if training_jobs['TrainingJobSummaries']:
                      training_job = training_jobs['TrainingJobSummaries'][0]['TrainingJobName']
                      job_info = sagemaker.describe_training_job(TrainingJobName=training_job)
                      model_artifacts = job_info['ModelArtifacts']['S3ModelArtifacts']
                      
                      # Extract bucket and prefix
                      bucket = model_artifacts.split('/')[2]
                      prefix = '/'.join(model_artifacts.split('/')[3:])
                      model_dir = os.path.dirname(prefix)
                      
                      # Try to get metrics file
                      try:
                          metrics_key = f"{model_dir}/model_metrics.json"
                          metrics_response = s3.get_object(
                              Bucket=bucket,
                              Key=metrics_key
                          )
                          
                          metrics = json.loads(metrics_response['Body'].read().decode('utf-8'))
                          result['model_metrics'] = metrics
                      except Exception as metrics_error:
                          print(f"Error loading metrics: {metrics_error}")
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': 'https://gan-text-to-image-dev-frontend.s3.us-east-1.amazonaws.com',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                      },
                      'body': json.dumps(result)
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': 'https://gan-text-to-image-dev-frontend.s3.us-east-1.amazonaws.com',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                      },
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }
      Environment:
        Variables:
          ENVIRONMENT: !Ref EnvironmentName
          PROJECT_NAME: !Ref ProjectName
          SAGEMAKER_ENDPOINT_NAME: 
            Fn::If:
              - HasModelArtifact
              - !Ref SageMakerEndpoint
              - ''


  MetricsLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-${EnvironmentName}-metrics'
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.handler
      Timeout: 60
      MemorySize: 256
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          
          def handler(event, context):
              # Find the latest training job and get metrics
              s3 = boto3.client('s3')
              sagemaker = boto3.client('sagemaker')
              
              try:
                  # Get the project name and environment
                  project_name = os.environ.get('PROJECT_NAME', 'gan-text-to-image')
                  environment = os.environ.get('ENVIRONMENT', 'dev')
                  
                  # Find the latest training job
                  training_job = "gan-train-2504270134"

                  
                  if not training_jobs['TrainingJobSummaries']:
                      return {
                          'statusCode': 404,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': 'https://gan-text-to-image-dev-frontend.s3.us-east-1.amazonaws.com',
                              'Access-Control-Allow-Headers': 'Content-Type',
                              'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                          },
                          'body': json.dumps({
                              'error': 'No training jobs found.'
                          })
                      }
                  
                  training_job = training_jobs['TrainingJobSummaries'][0]['TrainingJobName']
                  
                  # Get the model artifacts location
                  job_info = sagemaker.describe_training_job(TrainingJobName=training_job)
                  model_artifacts = job_info['ModelArtifacts']['S3ModelArtifacts']
                  
                  # Extract bucket and prefix
                  bucket = model_artifacts.split('/')[2]
                  prefix = '/'.join(model_artifacts.split('/')[3:])
                  model_dir = os.path.dirname(prefix)
                  
                  # Get metrics file
                  metrics_key = f"{model_dir}/model_metrics.json"
                  response = s3.get_object(
                      Bucket=bucket,
                      Key=metrics_key
                  )
                  
                  metrics = json.loads(response['Body'].read().decode('utf-8'))
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': 'https://gan-text-to-image-dev-frontend.s3.us-east-1.amazonaws.com',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                      },
                      'body': json.dumps(metrics)
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': 'https://gan-text-to-image-dev-frontend.s3.us-east-1.amazonaws.com',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                      },
                      'body': json.dumps({
                          'error': str(e),
                          'message': 'Failed to retrieve model metrics'
                      })
                  }
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
          ENVIRONMENT: !Ref EnvironmentName
  # ===== API Gateway =====
  APIGatewayRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${ProjectName}-${EnvironmentName}-api'
      Description: 'API for the Text-to-Image GAN project'

  InferenceResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt APIGatewayRestAPI.RootResourceId
      PathPart: 'generate'

  ImageMetricsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt APIGatewayRestAPI.RootResourceId
      PathPart: 'image-metrics'

  ImageMetricsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref ImageMetricsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ImageMetricsLambda.Arn}/invocations'

  ImageMetricsLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ImageMetricsLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGatewayRestAPI}/*/POST/image-metrics'

  MetricsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt APIGatewayRestAPI.RootResourceId
      PathPart: 'metrics'

  InferenceMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref InferenceResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InferenceLambda.Arn}/invocations'

  MetricsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref MetricsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MetricsLambda.Arn}/invocations'

  InferenceLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref InferenceLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGatewayRestAPI}/*/POST/generate'

  MetricsLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MetricsLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGatewayRestAPI}/*/GET/metrics'

  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - InferenceMethod
      - MetricsMethod
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      Description: 'Initial deployment'

  APIGatewayStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName: v1
      DeploymentId: !Ref APIGatewayDeployment
      # Disabled logging completely to avoid the CloudWatch Logs role ARN error
      # You can manually enable it later in the AWS Console

  # ===== CloudWatch Dashboard =====
  MonitoringDashboard:
    Type: 'AWS::CloudWatch::Dashboard'
    Properties:
      DashboardName: !Sub '${ProjectName}-${EnvironmentName}-dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Count", "ApiName", "${ProjectName}-${EnvironmentName}-api" ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "API Gateway Request Count"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${ProjectName}-${EnvironmentName}-inference" ],
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${ProjectName}-${EnvironmentName}-metrics" ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Invocations"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${ProjectName}-${EnvironmentName}-inference" ],
                  [ "AWS/Lambda", "Duration", "FunctionName", "${ProjectName}-${EnvironmentName}-metrics" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Lambda Duration"
              }
            }
          ]
        }

Conditions:
  HasModelArtifact: !And [!Not [!Equals [!Ref ModelArtifactUrl, '']], !Not [!Equals [!Ref ContainerImage, '']]]

Outputs:
  SageMakerRoleArn:
    Description: "ARN of the SageMaker execution role"
    Value: !GetAtt SageMakerRole.Arn
    Export:
      Name: !Sub "${ProjectName}-${EnvironmentName}-sagemaker-role-arn"
  
  LambdaRoleArn:
    Description: "ARN of the Lambda execution role"
    Value: !GetAtt LambdaRole.Arn
    Export:
      Name: !Sub "${ProjectName}-${EnvironmentName}-lambda-role-arn"
  
  ModelArtifactBucketName:
    Description: "Name of the S3 bucket for model artifacts"
    Value: !Ref ModelArtifactBucket
    Export:
      Name: !Sub "${ProjectName}-${EnvironmentName}-model-artifact-bucket"
  
  APIEndpoint:
    Description: "URL of the API Gateway endpoint"
    Value: !Sub "https://${APIGatewayRestAPI}.execute-api.${AWS::Region}.amazonaws.com/v1"
    Export:
      Name: !Sub "${ProjectName}-${EnvironmentName}-api-endpoint"